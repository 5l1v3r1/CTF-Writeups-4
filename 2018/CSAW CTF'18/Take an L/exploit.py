from pwn import *
import re
context.log_level = 'debug'
p = remote("misc.chal.csaw.io", 9000)

def section(array, size):
    x, y = array[0], array[1]
    if x < size / 2:
        if y < size / 2:
            return 0
        else: return 1
    else:
        if y < size / 2:
            return 2
        else: return 3
 
def tile(size, point, xoff=0, yoff=0):
    # print ("tile({}, {}, {}, {})".format(size, point, xoff, yoff))
    point = tuple(point)
    if size % 2 != 0: raise Exception("Size odd: tile({}, {}, {}, {})".format(size, point, xoff, yoff))
    half = int(size / 2)
    x, y = point[0], point[1]
    if size == 2:
        result = [[(u, v) for u in range(2) for v in range(2) if (u, v) != point]]
    else:
        array = [[(xi + half - 1, yi + half - 1) for xi in range(2) for yi in range(2) if xi != x // half or yi != y // half]]
        tmp = array[0] + [point]
        grid = [['.' for _ in range(size)] for _ in range(size)]
        for u, v in tmp:
            grid[u][v] = 'X'
        grid[x][y] = 'W'
 
        # print (tmp)
 
        for u in tmp:
            if section(u, size) == 0: p0 = u
            elif section(u, size) == 1: p1 = u
            elif section(u, size) == 2: p2 = u
            elif section(u, size) == 3: p3 = u
        p1 = (p1[0], p1[1] - half)
        p2 = (p2[0] - half, p2[1])
        p3 = (p3[0] - half, p3[1] - half)
        # print ("Array: {}".format(array))
        result = array + tile(half, p0) + tile(half, p1, 0, half) + tile(half, p2, half, 0) + tile(half, p3, half, half)
    for index in range(len(result)):
        result[index] = list(map(lambda t: (t[0] + xoff, t[1] + yoff), result[index]))
    return result
 
def show(array):
    return '\n'.join(map(lambda t: ''.join(t)[1:-1:], map(str, array)))
 
def griding(size, point, xoff=0, yoff=0):
    array = tile(size, point, xoff, yoff)
    grid = [['.' for _ in range(size)] for _ in range(size)]
    index = 0
    alphabets = ''.join(map(chr, list(range(65, 91)))).lower() # + ''.join(map(chr, list(range(65, 91))))
    for t in array:
        char = alphabets[index % len(alphabets)]
        for a in t:
            grid[a[0]][a[1]] = char
        index += 1
    show(grid)
 

p.recvuntil('\n\n')
x = p.recvline()
x = x.split()
x = x[2]
y = x.split('x')[0]
size = int(y)

newl = p.recvline()
s = re.findall('\(\d+, \d+\)', newl)
s = s[0].split()

first = int(s[0][1:-1])
second = int(s[1][:-1])

x = show(tile(size, (first, second)))
p.sendline(x)

p.interactive()